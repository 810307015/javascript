/* 哈希算法 */
/* 一个优秀的 hash 算法，将能实现：
  1. 正向快速：给定明文和 hash 算法，在有限时间和有限资源内能计算出 hash 值。
  2. 逆向困难：给定（若干） hash 值，在有限时间内很难（基本不可能）逆推出明文。
  3. 输入敏感：原始输入信息修改一点信息，产生的 hash 值看起来应该都有很大不同。
  4. 冲突避免：很难找到两段内容不同的明文，使得它们的 hash 值一致（发生冲突）。即对于任意两个不同的数据块，其hash值相同的可能性极小；对于一个给定的数据块，找到和它hash值相同的数据块极为困难。

  实现的手段： 模运算和异或算法等。
  流行的 hash算法：MD5, SHA-1和 SHA-2。
  碰撞： 由于其位数是有限的，通过在一定位数之内的数字使用正确的 hash 函数去计算，总能得到两个相同的值。即使它们原来的值不相等，但是得到的 hash 值是有可能相等的。
*/

// 最简单 hash 函数
var simpleHash = function (n) {
  return (n + 2 + (n << 2)) % 100 * 100000 ^ (+new Date());
}

for (var i = 0; i < 100; i++) {
  console.log(simpleHash(i));
}